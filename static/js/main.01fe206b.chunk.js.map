{"version":3,"sources":["Components/Alert.js","Components/Navbar.js","Components/TestForm.js","App.js","reportWebVitals.js","index.js"],"names":["Alert","props","alert","className","type","role","word","lower","toLowerCase","charAt","toUpperCase","slice","capitalize","msg","Navbar","mode","href","title","id","onClick","colourmode","htmlFor","togglemode","TestForm","useState","text","setText","style","color","heading","backgroundColor","rows","value","onChange","event","target","newtxt","toLocaleUpperCase","showAlert","toLocaleLowerCase","document","getElementById","select","navigator","clipboard","writeText","newText","split","join","length","defaultProps","aboutText","App","setMode","setAlert","message","body","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.01fe206b.chunk.js","sourcesContent":["import React from 'react'\n\nexport default function Alert(props) {\n    const capitalize =(word)=>{\n        const lower = word.toLowerCase();\n        return lower.charAt(0).toUpperCase() + lower.slice(1);\n    }\n    return (\n            props.alert && <div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\n               <strong>{capitalize(props.alert.type)}</strong>: {props.alert.msg}\n                <button type=\"button\" className=\"btn-close\" data-bs-dismiss=\"alert\" aria-label=\"Close\"></button>\n            </div>\n       \n    )\n}\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\n// import {Link} from \"react-router-dom\";\nexport default function Navbar(props) {\n  return (\n    <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\n      <div className=\"container-fluid\">\n        <a className=\"navbar-brand\" href=\"#\">\n          {props.title}\n        </a>\n        <button\n          className=\"navbar-toggler\"\n          type=\"button\"\n          data-bs-toggle=\"collapse\"\n          data-bs-target=\"#navbarSupportedContent\"\n          aria-controls=\"navbarSupportedContent\"\n          aria-expanded=\"false\"\n          aria-label=\"Toggle navigation\"\n        >\n          <span className=\"navbar-toggler-icon\"></span>\n        </button>\n        <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\n          <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\n            <li className=\"nav-item\">\n              <a className=\"nav-a active\" aria-current=\"page\" href=\"#\">\n                Home\n              </a>\n            </li>\n            {/* <li className=\"nav-item mx-2\">\n              <a className=\"nav-a\" href=\"/about\">\n                {props.aboutText}\n              </a>\n            </li> */}\n          </ul>\n          <div className={`form-check form-switch text-${props.mode==='light' ?'dark':'light'}`}>\n            <input className=\"form-check-input\" onClick={props.colourmode} type=\"checkbox\" role=\"switch\" id=\"flexSwitchCheckDefault\" />\n            <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">Enable colouredMode</label>\n          </div>\n          <div className={`mx-3 form-check form-switch text-${props.mode==='light' ?'dark':'light'}`}>\n            <input className=\"form-check-input\" onClick={props.togglemode} type=\"checkbox\" role=\"switch\" id=\"flexSwitchCheckDefault\" />\n            <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">Enable DarkMode</label>\n          </div>\n        </div>\n      </div>\n    </nav>\n  );\n}\n\nNavbar.propTypes = { title: PropTypes.string.isRequired,\n                         aboutText: PropTypes.string.isRequired };\n\nNavbar.defaultProps ={ title: 'Set title here',\n                        aboutText: 'About text hare' }","import React, { useState } from \"react\";\n\nexport default function TestForm(props) {\n  const handleUpclick = () => {\n    let newtxt = text.toLocaleUpperCase();\n    setText(newtxt);\n    props.showAlert(\"Coverted to UpperCase letters\", \"success\");\n  };\n  const handleloclick = () => {\n    let newtxt = text.toLocaleLowerCase();\n    setText(newtxt);\n    props.showAlert(\"Coverted LowerCase letters\", \"success\");\n  };\n  const handleclclick = () => {\n    let newtxt = \" \";\n    setText(newtxt);\n    props.showAlert(\"Text is Cleared\", \"success\");\n  };\n  const handleCopy = () => {\n    var text = document.getElementById(\"mybox\");\n    text.select();\n    navigator.clipboard.writeText(text.value);\n    props.showAlert(\"Text is Copied\", \"success\");\n  };\n  const handleRemove = () => {\n    let newText = text.split(/[ ]+/);\n    setText(newText.join(\" \"));\n    props.showAlert(\"Extra spaces are removed\", \"success\");\n  };\n  const handleOnChange = (event) => {\n    setText(event.target.value);\n  };\n  const [text, setText] = useState(\"\");\n  return (\n      <>\n    <div className=\"container\" style={{color: props.mode==='dark' ?'white':'black'}}>\n      <h2 >{props.heading}</h2>\n      <div className=\"mb-3\">\n        <textarea\n          className=\"form-control\"\n          id=\"mybox\"\n          style={{backgroundColor: props.mode==='dark' ?'grey':'white',color: props.mode==='dark' ?'white':'black'}}\n          rows=\"8\"\n          value={text}\n          onChange={handleOnChange}\n        ></textarea>\n      </div>\n      <button className=\"btn btn-primary mx-2\" onClick={handleUpclick}>\n        Convert to Uppercase\n      </button>\n      <button className=\"btn btn-primary mx-2\" onClick={handleloclick}>\n        Convert toLowercase\n      </button>\n      <button className=\"btn btn-primary mx-2\" onClick={handleclclick}>\n        Clear Text\n      </button>\n      <button className=\"btn btn-primary mx-2\" onClick={handleCopy}>\n        Copy Text\n      </button>\n      <button className=\"btn btn-primary mx-2\" onClick={handleRemove}>\n        Remove Extra Spaces\n      </button>\n    </div>\n    <div className=\"container my-3\" style={{color: props.mode==='dark' ?'white':'black'}}>\n        <h2>Your text summary</h2>\n        <p><b>{(text.split(\" \").length -1)}</b>words, <b>{text.length}</b> characters</p>\n        <p><b>{0.008 *text.split(\" \").length}</b> Minutes read</p>\n        <h2>Preview</h2>\n        <p>{text.length>0?text:\"Enter something in the textbox above to preview it here\"}</p>\n    </div>\n    </>\n  );\n}\n","import React, { useState } from \"react\";\nimport Alert from \"./Components/Alert\";\n// import About from \"./Components/About\";\nimport Navbar from \"./Components/Navbar\";\nimport TestForm from \"./Components/TestForm\";\n// import {\n//   BrowserRouter as Router,\n//   Switch,\n//   Route\n// } from \"react-router-dom\";\n\nfunction App() {\n  const [mode, setMode] = useState('light');\n  const [alert, setAlert] = useState(null);\n\n  const showAlert =(message,type)=>{\n    setAlert({\n      msg: message,\n      type: type\n    })\n  }\n\n  const togglemode =()=>{\n    if(mode === 'light'){\n      setMode('dark');\n      document.body.style.backgroundColor = '#0a3a80';\n      showAlert(\"Dark mode has been enabled\", \"success\");\n      document.title = 'TextUtils - DarkMode'\n    }\n    else{\n      setMode('light');\n      document.body.style.backgroundColor = 'white';\n      showAlert(\"Light mode has been enabled\", \"success\");\n      document.title = 'TextUtils - LightMode'\n    }\n  }\n  const colourmode =()=>{\n    if(mode === 'light'){\n      setMode('#fdcbcb');\n      document.body.style.backgroundColor = '#fdcbcb';\n        showAlert(\"Coloured mode has been enabled\", \"success\");\n      document.title = 'TextUtils - ColourMode'\n    }\n    else{\n      setMode('light');\n      document.body.style.backgroundColor = 'white';\n      showAlert(\"Light mode has been enabled\", \"success\");\n      document.title = 'TextUtils - LightMode'\n    }\n  }\n\n  return (\n    <>\n      {/* <Router> */}\n        <Navbar title=\"TextUtils\" aboutText=\"About Us\" mode={mode} togglemode={togglemode} colourmode={colourmode}/>\n        <Alert alert={alert}/>\n        <div className=\"container my-3\">\n          {/* <Switch>\n            <Route exact path=\"/about\">\n              <About />\n            </Route> */}\n            {/* <Route exact path=\"/\"> */}\n              <TestForm showAlert={showAlert}  heading=\"Enter the text here to analyse\" mode={mode}/>\n            {/* </Route>\n          </Switch> */}\n        </div>\n      {/* </Router> */}\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}